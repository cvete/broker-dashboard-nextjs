/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Tooltip from \"./Tooltip\";\n\ninterface BrokerData {\n  broker: string;\n  rent: number;\n  sale: number;\n}\n\nexport interface PropTechBrokersProps {\n  data: BrokerData[];\n  title: string;\n  maxTotal: number;\n  rentLabel: string;\n  saleLabel: string;\n}\n\nconst LABEL_WIDTH = 140; // px, for 15 chars\nconst BAR_CONTAINER_WIDTH = 335; // px, bar container width\nconst MAX_BAR_WIDTH = 290; // px, max width for the bar itself\nconst GAP = 8; // px, gap between label and bar\nconst NUMBER_MARGIN = 8; // px, margin between bar end and number\nconst NUMBER_WIDTH = 40; // px, fixed width for number box\n\nexport function PropTechBrokers({ data, title, maxTotal, rentLabel, saleLabel }: PropTechBrokersProps) {\n  // Animation state\n  const [showBars, setShowBars] = useState(false);\n  const [showTotals, setShowTotals] = useState(false);\n  const [tooltip, setTooltip] = useState<{\n    show: boolean;\n    x: number;\n    y: number;\n    broker?: BrokerData;\n  }>({ show: false, x: 0, y: 0 });\n  const barRefs = useRef<(HTMLDivElement | null)[]>([]);\n\n  useEffect(() => {\n    // Reset animation states when data changes\n    setShowBars(false);\n    setShowTotals(false);\n    \n    // Start animations with a slight delay\n    const barTimeout = setTimeout(() => setShowBars(true), 100);\n    const totalTimeout = setTimeout(() => setShowTotals(true), 800);\n    \n    return () => {\n      clearTimeout(barTimeout);\n      clearTimeout(totalTimeout);\n    };\n  }, [data, maxTotal]);\n\n  const handleMouseEnter = (idx: number, broker: BrokerData) => (e: React.MouseEvent) => {\n    setTooltip({\n      show: true,\n      x: e.clientX + 10,\n      y: e.clientY - 40,\n      broker,\n    });\n  };\n  const handleMouseLeave = () => setTooltip({ show: false, x: 0, y: 0 });\n\n  if (!Array.isArray(data)) {\n    return (\n      <div className=\"w-full flex items-center justify-center py-12 text-red-600 font-semibold text-center\">\n        Server Error. Please get in touch with your administrator.\n      </div>\n    );\n  }\n\n  // Sort data by total listings descending\n  const sorted = [...data]\n    .filter((item) => (item.rent + item.sale) > 0)\n    .sort((a, b) => (b.rent + b.sale) - (a.rent + a.sale));\n\n  return (\n    <div className=\"bg-[#fcfcfc] relative rounded-[7.7px] w-full border\">\n      <Tooltip show={tooltip.show} x={tooltip.x} y={tooltip.y}>\n        {tooltip.broker && (\n          <div className=\"flex flex-col items-start\">\n            <div className=\"font-bold text-black mb-1\">{tooltip.broker.broker}</div>\n            <div className=\"flex items-center gap-2 mb-0.5\">\n              <span className=\"w-3 h-3 rounded bg-[#0c56bc] inline-block\" />\n              <span className=\"text-gray-900\">{rentLabel}: {tooltip.broker.rent}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"w-3 h-3 rounded bg-[#69c29d] inline-block\" />\n              <span className=\"text-gray-900\">{saleLabel}: {tooltip.broker.sale}</span>\n            </div>\n          </div>\n        )}\n      </Tooltip>\n      <div className=\"relative size-full\">\n        <div className=\"flex flex-col gap-[6.4px] items-start justify-start p-[15.4px] w-full\">\n          <div className=\"w-full\">\n            <div className=\"flex flex-col gap-[30.8px] items-start justify-center w-full\">\n              <div className=\"font-semibold text-[#212123] text-[18px] text-left\">\n                <p className=\"leading-normal whitespace-pre\">{title}</p>\n              </div>\n              <div>\n                <div className=\"flex flex-col gap-[10.3px] items-start justify-start\">\n                  {sorted.map((item, idx) => {\n                    const total = item.rent + item.sale;\n                    const displayName = item.broker.length > 15 ? item.broker.slice(0, 15) + 'â€¦' : item.broker;\n                    // Bar width in px, capped at MAX_BAR_WIDTH\n                    const barWidth = total > 0 ? (total / maxTotal) * MAX_BAR_WIDTH : 0;\n                    const rentWidth = total > 0 ? (item.rent / total) * barWidth : 0;\n                    const saleWidth = total > 0 ? (item.sale / total) * barWidth : 0;\n                    return (\n                      <div key={idx} className=\"flex flex-row items-center\" style={{ width: LABEL_WIDTH + BAR_CONTAINER_WIDTH + 100 }}>\n                        <div className=\"font-normal text-[#000] text-[15.4px] text-left whitespace-nowrap\" style={{ minWidth: LABEL_WIDTH, maxWidth: LABEL_WIDTH, overflow: 'hidden', textOverflow: 'ellipsis' }}>\n                          <p className=\"leading-normal whitespace-pre\">{displayName}</p>\n                        </div>\n                        <div style={{ width: BAR_CONTAINER_WIDTH, marginLeft: GAP }} className=\"relative flex flex-row items-center cursor-pointer bg-transparent h-[26.3px]\">\n                          <div\n                            ref={el => {\n                              barRefs.current[idx] = el;\n                            }}\n                            className=\"flex flex-row items-center h-full\"\n                            style={{ \n                              width: showBars ? barWidth : 0,\n                              transition: 'width 0.7s cubic-bezier(.4,1.7,.6,.97)'\n                            }}\n                            onMouseEnter={handleMouseEnter(idx, item)}\n                            onMouseLeave={handleMouseLeave}\n                          >\n                            <div\n                              className=\"bg-[#0c56bc] h-full\"\n                              style={{ \n                                width: showBars ? rentWidth : 0,\n                                transition: 'width 0.7s cubic-bezier(.4,1.7,.6,.97)'\n                              }}\n                            />\n                            <div\n                              className=\"bg-[#69c29d] h-full\"\n                              style={{ \n                                width: showBars ? saleWidth : 0,\n                                transition: 'width 0.7s cubic-bezier(.4,1.7,.6,.97)'\n                              }}\n                            />\n                          </div>\n                          {/* Number appears immediately after the bar, with a small left margin */}\n                          {total > 0 && (\n                            <span\n                              className={`text-xs text-gray-700 font-medium transition-opacity duration-500 flex items-center justify-end ${showTotals ? 'opacity-100' : 'opacity-0'}`}\n                              style={{ marginLeft: NUMBER_MARGIN }}\n                            >\n                              {total}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}
"use client";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Header } from \"@/components/Header\";\nimport { PropTechBrokers } from \"@/components/PropTechBrokers\";\nimport { TraditionalAgents } from \"@/components/TraditionalAgents\";\nimport { HeroSection } from \"@/components/HeroSection\";\nimport { Footer } from \"@/components/Footer\";\nimport Image from \"next/image\";\n\ninterface Broker {\n  broker: string;\n  rent: number;\n  sale: number;\n  total: number;\n  category: \"proptech\" | \"traditional\";\n}\n\ninterface BrokerData {\n  updatedOn: string;\n  brokers: Broker[];\n}\n\nconst translations = {\n  EN: {\n    headline: \"The Leading Real Estate\\nTech Agent in 2030.\",\n    rent: \"Rent\",\n    sale: \"Sale\",\n    proptech: \"PropTech Agents\",\n    traditional: \"Traditional Agents\",\n    totalListings: \"Total Listings\",\n    source: \"Source: homegate.ch\",\n    updated: \"Updated:\",\n    download: \"Download\",\n    logout: \"Logout\",\n    autoRefresh: \"Data auto-refreshes each time you open this page.\",\n    hoverForDetails: \"Hover over charts for details.\",\n  },\n  DE: {\n    headline: \"Der führende Immobilien-Tech-Agent im Jahr 2030.\",\n    rent: \"Miete\",\n    sale: \"Kauf\",\n    proptech: \"PropTech-Agenten\",\n    traditional: \"Traditionelle Agenten\",\n    totalListings: \"Gesamtangebote\",\n    source: \"Quelle: homegate.ch\",\n    updated: \"Aktualisiert:\",\n    download: \"Herunterladen\",\n    logout: \"Abmelden\",\n    autoRefresh: \"Daten werden bei jedem Öffnen der Seite automatisch aktualisiert.\",\n    hoverForDetails: \"Für Details über die Diagramme fahren.\",\n  },\n  FR: {\n    headline: \"Le principal agent immobilier tech en 2030.\",\n    rent: \"Location\",\n    sale: \"Vente\",\n    proptech: \"Agents PropTech\",\n    traditional: \"Agents traditionnels\",\n    totalListings: \"Annonces totales\",\n    source: \"Source : homegate.ch\",\n    updated: \"Mis à jour :\",\n    download: \"Télécharger\",\n    logout: \"Se déconnecter\",\n    autoRefresh: \"Les données sont automatiquement actualisées à chaque ouverture de la page.\",\n    hoverForDetails: \"Survolez les graphiques pour plus de détails.\",\n  },\n  IT: {\n    headline: \"Il principale agente immobiliare tech nel 2030.\",\n    rent: \"Affitto\",\n    sale: \"Vendita\",\n    proptech: \"Agenti PropTech\",\n    traditional: \"Agenti tradizionali\",\n    totalListings: \"Annunci totali\",\n    source: \"Fonte: homegate.ch\",\n    updated: \"Aggiornato:\",\n    download: \"Scarica\",\n    logout: \"Disconnetti\",\n    autoRefresh: \"I dati vengono aggiornati automaticamente ogni volta che apri questa pagina.\",\n    hoverForDetails: \"Passa il mouse sui grafici per i dettagli.\",\n  },\n};\n\nexport default function Home() {\n  const [data, setData] = useState<BrokerData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [lang, setLang] = useState<\"EN\" | \"DE\" | \"FR\" | \"IT\">(\"EN\");\n  const chartRef = useRef<HTMLDivElement>(null);\n  const [isDesktop, setIsDesktop] = useState(true);\n\n  useEffect(() => {\n    fetch(\"/api/broker-data\", { method: \"GET\" })\n      .then((res) => res.json())\n      .then((d: BrokerData) => {\n        setData(d);\n        setLoading(false);\n      });\n  }, []);\n\n  useEffect(() => {\n    const checkWidth = () => setIsDesktop(window.innerWidth >= 1200);\n    checkWidth();\n    window.addEventListener('resize', checkWidth);\n    return () => window.removeEventListener('resize', checkWidth);\n  }, []);\n\n  const handleLogout = async () => {\n    await fetch(\"/api/logout\", { method: \"POST\" });\n    window.location.href = \"/login\";\n  };\n\n  const t = translations[lang];\n\n  // Find the max total listings across both proptech and traditional\n  const maxTotal = React.useMemo(() => {\n    if (!data || !Array.isArray(data.brokers)) return 1;\n    const all = data.brokers;\n    return Math.max(...all.map((d) => d.total), 1);\n  }, [data]);\n\n  const proptechBrokers = React.useMemo(() => {\n    if (!data || !Array.isArray(data.brokers)) return [];\n    return data.brokers.filter(b => b.category === \"proptech\");\n  }, [data]);\n\n  const traditionalBrokers = React.useMemo(() => {\n    if (!data || !Array.isArray(data.brokers)) return [];\n    return data.brokers.filter(b => b.category === \"traditional\");\n  }, [data]);\n\n  // Find the 'properti' broker from proptechBrokers (if present)\n  const propertiBroker = proptechBrokers.find(b => b.broker.trim().toLowerCase() === \"properti\");\n\n  const showNoData = !loading && proptechBrokers.length === 0 && traditionalBrokers.length === 0;\n\n  if (!isDesktop) {\n    return (\n      <div className=\"w-screen h-screen flex items-center justify-center bg-white text-black text-xl font-semibold\">\n        This is a desktop only app. Please visit on desktop\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      <Header\n        chartRef={chartRef as React.RefObject<HTMLDivElement>}\n        onLogout={handleLogout}\n        lang={lang}\n        setLang={setLang}\n        downloadLabel={t.download}\n        logoutLabel={t.logout}\n      />\n      <main className=\"flex-1 flex flex-col items-center justify-center px-4 py-8\">\n        <div className=\"w-full max-w-6xl bg-white rounded-xl shadow p-12 flex flex-col\" ref={chartRef}>\n          {showNoData ? (\n            <div className=\"text-center py-24 text-lg text-gray-500 font-semibold\">\n              No data available. Please reload the page to refresh data.\n            </div>\n          ) : (\n            <div className=\"flex flex-row items-end gap-12 flex-1 min-h-[520px]\">\n              {/* Left column: logo, title, legend, PropTech Agents */}\n              <div className=\"flex flex-col flex-1 basis-1/2 h-full min-w-0 max-w-full\">\n                <Image src=\"/logo.svg\" alt=\"Properti Logo\" width={150} height={38} className=\"mb-6\" />\n                <HeroSection headline={t.headline.replace(/\\n/g, ' ')} rentLabel={t.rent} saleLabel={t.sale} />\n                <div className=\"flex-1 flex flex-col justify-end\">\n                  {loading ? (\n                    <div className=\"text-center py-12\">Loading...</div>\n                  ) : (\n                    <PropTechBrokers \n                      data={proptechBrokers} \n                      title={t.proptech} \n                      maxTotal={maxTotal} \n                      rentLabel={t.rent} \n                      saleLabel={t.sale} \n                    />\n                  )}\n                </div>\n              </div>\n              {/* Right column: Traditional Agents */}\n              <div className=\"flex flex-col flex-1 basis-1/2 h-full min-w-0 max-w-full\">\n                <div className=\"flex-1 flex flex-col justify-end\">\n                  {loading ? (\n                    <div className=\"text-center py-12\">Loading...</div>\n                  ) : (\n                    <TraditionalAgents \n                      data={traditionalBrokers} \n                      title={t.traditional} \n                      maxTotal={maxTotal} \n                      rentLabel={t.rent} \n                      saleLabel={t.sale} \n                      propertiBroker={propertiBroker}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n          {/* Source and updated pills, always left-aligned at the bottom */}\n          <div className=\"mt-8\">\n            <Footer lastUpdated={data?.updatedOn} source={t.source} updatedLabel={t.updated} lang={lang} />\n          </div>\n        </div>\n        {/* Auto-refresh note moved outside the chart box */}\n        <div className=\"mt-10 text-center text-sm text-gray-500 flex flex-row items-center justify-center gap-4\">\n          <span>{t.autoRefresh}</span>\n          <span>•</span>\n          <span>{t.hoverForDetails}</span>\n        </div>\n      </main>\n    </div>\n  );\n}